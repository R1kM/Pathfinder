def_module_params('fixedpoint', 
                  description='fixedpoint parameters',
                  export=True,
                  params=(('timeout', UINT, UINT_MAX, 'set timeout'),
                          ('engine', SYMBOL, 'auto-config', 'Select: auto-config, datalog, pdr, bmc'),
			  ('default_table', SYMBOL, 'sparse', 'default table implementation: sparse, hashtable, bitvector, interval'),
                          ('default_relation', SYMBOL, 'pentagon', 'default relation implementation: external_relation, pentagon'),
                          ('generate_explanations', BOOL, False, '(DATALOG) produce explanations for produced facts when using the datalog engine'),
                          ('use_map_names', BOOL, True, "(DATALOG) use names from map files when displaying tuples"),
                          ('bit_blast', BOOL, False, '(PDR) bit-blast bit-vectors'),
                          ('explanations_on_relation_level', BOOL, False, '(DATALOG) if true, explanations are generated as history of each relation, rather than per fact (generate_explanations must be set to true for this option to have any effect)'),
                          ('magic_sets_for_queries', BOOL, False, "(DATALOG) magic set transformation will be used for queries"),
                          ('magic', BOOL, False, "perform symbolic magic set transformation"),
                          ('scale', BOOL, False, "add scaling variable to linear real arithemtic clauses"),
                          ('unbound_compressor', BOOL, True, "auxiliary relations will be introduced to avoid unbound variables in rule heads"),
                          ('similarity_compressor', BOOL, True, "(DATALOG) rules that differ only in values of constants will be merged into a single rule"),
                          ('similarity_compressor_threshold', UINT, 11, "(DATALOG) if similarity_compressor is on, this value determines how many similar rules there must be in order for them to be merged"),
                          ('all_or_nothing_deltas', BOOL, False, "(DATALOG) compile rules so that it is enough for the delta relation in union and widening operations to determine only whether the updated relation was modified or not"),
                          ('compile_with_widening', BOOL, False, "(DATALOG) widening will be used to compile recursive rules"),
                          ('eager_emptiness_checking', BOOL, True, "(DATALOG) emptiness of affected relations will be checked after each instruction, so that we may ommit unnecessary instructions"),
                          ('default_table_checked', BOOL, False, "if true, the detault table will be default_table inside a wrapper that checks that its results are the same as of default_table_checker table"),
                          ('default_table_checker', SYMBOL, 'null', "see default_table_checked"),


                          ('initial_restart_timeout', UINT, 0, "length of saturation run before the first restart (in ms), zero means no restarts"),
                          ('output_profile', BOOL, False, "determines whether profile informations should be output when outputting Datalog rules or instructions"),
                          ('inline_linear', BOOL, True, "try linear inlining method"),
                          ('inline_eager', BOOL, True, "try eager inlining of rules"),
                          ('inline_linear_branch', BOOL, False, "try linear inlining method with potential expansion"),
                          ('fix_unbound_vars', BOOL, False, "fix unbound variables in tail"),
                          ('output_tuples', BOOL, True, "determines whether tuples for output predicates should be output"),
                          ('print_with_fixedpoint_extensions', BOOL, True, "use SMT-LIB2 fixedpoint extensions, instead of pure SMT2, when printing rules"),
                          ('print_low_level_smt2', BOOL, False, "use (faster) low-level SMT2 printer (the printer is scalable but the result may not be as readable)"),
                          ('print_with_variable_declarations', BOOL, True, "use variable declarations when displaying rules (instead of attempting to use original names)"),
                          ('bfs_model_search', BOOL, True, "PDR: use BFS strategy for expanding model search"),    
                          ('use_farkas', BOOL, True, "PDR: use lemma generator based on Farkas (for linear real arithmetic)"),
                          ('generate_proof_trace', BOOL, False, "PDR: trace for 'sat' answer as proof object"),
                          ('flexible_trace', BOOL, False, "PDR: allow PDR generate long counter-examples "
                                                          "by extending candidate trace within search area"),
                          ('unfold_rules', UINT, 0, "PDR: unfold rules statically using iterative squarring"),
                          ('use_model_generalizer', BOOL, False, "PDR: use model for backwards propagation (instead of symbolic simulation)"),
                          ('validate_result', BOOL, False, "PDR validate result (by proof checking or model checking)"),
                          ('simplify_formulas_pre', BOOL, False, "PDR: simplify derived formulas before inductive propagation"),
                          ('simplify_formulas_post', BOOL, False, "PDR: simplify derived formulas after inductive propagation"),
                          ('slice', BOOL, True, "PDR: simplify clause set using slicing"),
	                  ('karr',  BOOL, False, "Add linear invariants to clauses using Karr's method"),
	                  ('quantify_arrays', BOOL, False, "create quantified Horn clauses from clauses with arrays"),
	                  ('instantiate_quantifiers', BOOL, False, "instantiate quantified Horn clauses using E-matching heuristic"),
                          ('coalesce_rules', BOOL, False, "BMC: coalesce rules"),
                          ('use_multicore_generalizer', BOOL, False, "PDR: extract multiple cores for blocking states"),
                          ('use_inductive_generalizer', BOOL, True, "PDR: generalize lemmas using induction strengthening"),
                          ('use_arith_inductive_generalizer', BOOL, False, "PDR: generalize lemmas using arithmetic heuristics for induction strengthening"),
	                  ('use_convex_closure_generalizer', BOOL, False, "PDR: generalize using convex closures of lemmas"),
	                  ('use_convex_interior_generalizer', BOOL, False, "PDR: generalize using convex interiors of lemmas"),
                          ('cache_mode', UINT, 0, "PDR: use no (0), symbolic (1) or explicit cache (2) for model search"),
                          ('inductive_reachability_check', BOOL, False, "PDR: assume negation of the cube on the previous level when "
                                                                        "checking for reachability (not only during cube weakening)"),
                          ('max_num_contexts', UINT, 500, "PDR: maximal number of contexts to create"),
                          ('try_minimize_core', BOOL, False, "PDR: try to reduce core size (before inductive minimization)"),
                          ('profile_timeout_milliseconds', UINT, 0, "instructions and rules that took less than the threshold will not be printed when printed the instruction/rule list"),
                          ('dbg_fpr_nonempty_relation_signature', BOOL, False,
                                     "if true, finite_product_relation will attempt to avoid creating inner relation with empty signature "
                                     "by putting in half of the table columns, if it would have been empty otherwise"),
                          ('print_answer', BOOL, False, 'print answer instance(s) to query'),
                          ('print_certificate', BOOL, False, 'print certificate for reachability or non-reachability'),
                          ('print_boogie_certificate', BOOL, False, 'print certificate for reachability or non-reachability using a format understood by Boogie'),
                          ('print_statistics',  BOOL, False, 'print statistics'),
			  ('use_utvpi', BOOL, True, 'PDR: Enable UTVPI strategy'),
	                  ('tab_selection', SYMBOL, 'weight', 'selection method for tabular strategy: weight (default), first, var-use'),
	                  ('full_expand', BOOL, False, 'DUALITY: Fully expand derivation trees'),
	                  ('no_conj', BOOL, False, 'DUALITY: No forced covering (conjectures)'),
	                  ('feasible_edges', BOOL, True, 'DUALITY: Don\'t expand definitley infeasible edges'),
	                  ('use_underapprox', BOOL, False, 'DUALITY: Use underapproximations'),
			  ('stratified_inlining', BOOL, False, 'DUALITY: Use stratified inlining'),
			  ('recursion_bound', UINT, UINT_MAX, 'DUALITY: Recursion bound for stratified inlining'),
			  ('profile', BOOL, False, 'DUALITY: profile run time'),
			  ('mbqi', BOOL, True, 'DUALITY: use model-based quantifier instantion'),
			  ('batch_expand', BOOL, False, 'DUALITY: use batch expansion'),
                          ('dump_aig', SYMBOL, '', 'Dump clauses in AIG text format (AAG) to the given file name'),
			  ('conjecture_file', STRING, '', 'DUALITY: save conjectures to file'),
			  ('enable_restarts', BOOL, False, 'DUALITY: enable restarts'),
                          ))



